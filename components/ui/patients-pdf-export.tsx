"use client";

import React from 'react';
import { Document, Page, Text, View, StyleSheet, pdf } from '@react-pdf/renderer';
import { format } from 'date-fns';

// Define types for patient data
interface Patient {
  _id: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  email?: string;
  phone?: string;
  medicationPreference?: 'webster_pack' | 'bottles' | 'sachets';
}

interface PatientsExportProps {
  patients: Patient[];
  onExportComplete?: () => void;
}

// PDF Document Component
const PatientsPDFDocument: React.FC<{ patients: Patient[] }> = ({ patients }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <View style={styles.header}>
        <Text style={styles.title}>Patients Export Report</Text>
        <Text style={styles.subtitle}>
          Generated on {format(new Date(), 'dd/MM/yyyy HH:mm')}
        </Text>
        <Text style={styles.subtitle}>
          Total Patients: {patients.length}
        </Text>
      </View>

      <View style={styles.table}>
        {/* Table Header */}
        <View style={styles.tableRow}>
          <View style={[styles.tableCol, styles.nameCol]}>
            <Text style={styles.tableCellHeader}>Full Name</Text>
          </View>
          <View style={[styles.tableCol, styles.dobCol]}>
            <Text style={styles.tableCellHeader}>Date of Birth</Text>
          </View>
          <View style={[styles.tableCol, styles.phoneCol]}>
            <Text style={styles.tableCellHeader}>Phone</Text>
          </View>
          <View style={[styles.tableCol, styles.emailCol]}>
            <Text style={styles.tableCellHeader}>Email</Text>
          </View>
          <View style={[styles.tableCol, styles.packCol]}>
            <Text style={styles.tableCellHeader}>Pack Type</Text>
          </View>
        </View>

        {/* Table Rows */}
        {patients.map((patient, index) => (
          <View key={patient._id} style={[styles.tableRow, index % 2 === 0 ? styles.evenRow : styles.oddRow]}>
            <View style={[styles.tableCol, styles.nameCol]}>
              <Text style={styles.tableCell}>
                {patient.firstName} {patient.lastName}
              </Text>
            </View>
            <View style={[styles.tableCol, styles.dobCol]}>
              <Text style={styles.tableCell}>
                {format(new Date(patient.dateOfBirth), 'dd/MM/yyyy')}
              </Text>
            </View>
            <View style={[styles.tableCol, styles.phoneCol]}>
              <Text style={styles.tableCell}>
                {patient.phone || 'N/A'}
              </Text>
            </View>
            <View style={[styles.tableCol, styles.emailCol]}>
              <Text style={styles.tableCell}>
                {patient.email || 'N/A'}
              </Text>
            </View>
            <View style={[styles.tableCol, styles.packCol]}>
              <Text style={styles.tableCell}>
                {patient.medicationPreference 
                  ? patient.medicationPreference.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())
                  : 'Not specified'
                }
              </Text>
            </View>
          </View>
        ))}
      </View>

      {/* Footer */}
      <View style={styles.footer}>
        <Text style={styles.footerText}>
          This report contains {patients.length} patient records from your organisation.
        </Text>
        <Text style={styles.footerText}>
          Export generated by PillFlow Healthcare Management System
        </Text>
      </View>
    </Page>
  </Document>
);

// Styles for PDF
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#FFFFFF',
    padding: 30,
    fontSize: 10,
    fontFamily: 'Helvetica',
  },
  header: {
    marginBottom: 20,
    textAlign: 'center',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
    color: '#2D3748',
  },
  subtitle: {
    fontSize: 12,
    color: '#4A5568',
    marginBottom: 3,
  },
  table: {
    display: 'flex',
    width: 'auto',
    borderStyle: 'solid',
    borderColor: '#CBD5E0',
    borderWidth: 1,
    borderRightWidth: 0,
    borderBottomWidth: 0,
  },
  tableRow: {
    margin: 'auto',
    flexDirection: 'row',
  },
  tableCol: {
    borderStyle: 'solid',
    borderColor: '#CBD5E0',
    borderWidth: 1,
    borderLeftWidth: 0,
    borderTopWidth: 0,
    padding: 5,
  },
  nameCol: {
    width: '25%',
  },
  dobCol: {
    width: '18%',
  },
  phoneCol: {
    width: '20%',
  },
  emailCol: {
    width: '25%',
  },
  packCol: {
    width: '12%',
  },
  tableCellHeader: {
    fontSize: 9,
    fontWeight: 'bold',
    color: '#2D3748',
    textAlign: 'center',
  },
  tableCell: {
    fontSize: 8,
    color: '#4A5568',
    textAlign: 'left',
  },
  evenRow: {
    backgroundColor: '#F7FAFC',
  },
  oddRow: {
    backgroundColor: '#FFFFFF',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    borderTopWidth: 1,
    borderTopColor: '#E2E8F0',
    paddingTop: 10,
  },
  footerText: {
    fontSize: 8,
    color: '#718096',
    marginBottom: 2,
  },
});

// Export function
export const exportPatientsToPDF = async (patients: Patient[]): Promise<void> => {
  try {
    const blob = await pdf(<PatientsPDFDocument patients={patients} />).toBlob();
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `patients-export-${format(new Date(), 'yyyy-MM-dd-HHmm')}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to export patients to PDF');
  }
};

// Hook for export functionality
export const usePatientsPDFExport = (patients: Patient[], onExportComplete?: () => void) => {
  const handleExport = async () => {
    try {
      await exportPatientsToPDF(patients);
      onExportComplete?.();
    } catch (error) {
      console.error('Export failed:', error);
      throw error;
    }
  };

  return { handleExport };
}; 